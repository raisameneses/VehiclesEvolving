  console.log(crossed_genome.length)
  // console.log(crossed_genome[1][1])
  // console.log(crossed_genome[2][1])
  // for(var i = 0; i < crossed_genome.length; i++){
  //   console.log(crossed_genome[i])
  // }


      for (var i = 1 ; i < 10; i++) {
        var mother_or_father =  Math.round(Math.random());
          if(mother_or_father == 0){
            crossed_genome[i] = father[i]; 
          }else{
            crossed_genome[i] = mother[i]; 
          }
    }

    for (var i = 1 ; i < 10; i++) {
        console.log(i)
        for (var j = 1; j < 13; j++) {
            console.log(crossed_genome[i][j])
        }
   }

   
AutonomousVehicle.prototype.modifyGenome = function(value){
  for(var i = 0; i < this.Genome.length; i++){
      for (var j = 1; j < 13; j++) {
        this.Genome[i][j] +=  value;
    }
  } 
}


var newGenome = []
    for(var i = 1; i < this.populationSize; i++){
      console.log(i)
      var rand = Math.floor(Math.random() * (crossed_genome.length - 1)) + 1;
      //console.log(crossed_genome[rand][1])
      newGenome = crossed_genome[rand]
      this.population[i].updateGenome(newGenome)
      console.log(newGenome[1])
    }


   


    Population.prototype.update = function(){ 
    if(this.generation < 100){
        var fitness_results = []  //Array to store the vehicles after driving for 10 seconds
        if(this.elapsedTime < this.totalTime){
           this.game.addEntity(this.population[this.currentCar])            
            this.elapsedTime++  
        } else if (this.elapsedTime == this.totalTime){ 
            fitness_results[this.currentCar] = this.population[this.currentCar]
            this.current_car_fitness = fitness_results[this.currentCar].fitness
            this.game.entities[2].removeFromWorld = true; 
            this.currentCar++
            this.elapsedTime = 0;
          } else if(this.currentCar >= this.populationSize -1 ){
            this.generation++
            this.currentCar =  1; 
              //var pool = this.crossover(fitness_results)
            //this.mutate(pool)
            //  for(var i = 1; i < this.populationSize; i++){
            //    var random = Math.floor(Math.random() * (crossed_genome.length - 1)) + 1;
            //    this.population[i].updateGenome(pool[random])
            //  }
      
        }  
    } 

 } 
